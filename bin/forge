#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';
use Civi\Repomanager\Shared\Infrastructure\Store\Gateway\SchemaGateway;
use Civi\Repomanager\Shared\Infrastructure\Store\Service\GraphQlEnrich;
use DI\Container;
use GraphQL\Utils\BuildSchema;

Forge::run($argv);


class Forge
{
    public static function run(array $argv): void
    {
        // Quitar el nombre del script
        array_shift($argv);

        // Primer argumento obligatorio
        $command = $argv[0] ?? null;

        if ($command === 'help' || $command === '--help' || $command === '-h') {
            self::printHelp();
            exit(0);
        } else if ($command === 'entity') {
            // Comando 'entity'
            $package = $argv[1] ?? null;
            $namespace = $argv[2] ?? null;
            $entityName = $argv[3] ?? null;
            if (!$package) {
                fwrite(STDERR, "‚ùå Error: Debes indicar el namespace php donde generar.\n");
                exit(1);
            }
            if (!$namespace) {
                fwrite(STDERR, "‚ùå Error: Debes indicar el namespace config.\n");
                exit(1);
            }
            if (!$entityName) {
                fwrite(STDERR, "‚ùå Error: Debes indicar el nombre de la entidad.\n");
                exit(1);
            }
            self::generateEntity($package, $namespace, $entityName);
        } else {
            fwrite(STDERR, "‚ùå Error: Comando no reconocido '$command'. Usa 'help' para ver opciones.\n");
            exit(1);
        }
    }

    private static function printHelp(): void
    {
        echo <<<HELP
Forge CLI - Generador de entidades desde DSL

Uso:
  forge entity namespace NombreEntidad    Genera la entidad, filtro y repositorio
  forge help                    Muestra esta ayuda

HELP;
    }

    private static function generateEntity(string $package, string $namespace, string $name): void
    {
        echo "üöÄ Generando entidad '$name'...\n";

        $package .= ".{$name}";
        $container = new Container();
        $di = require __DIR__ . '/../dependencies.php';
        $di($container);

        $instance = $container->get(SchemaGateway::class);
        $sdl = $instance->sdl($namespace);
        $enrich = $container->get(GraphQlEnrich::class);
        $esdl = $enrich->augmentAndSave($sdl);
        $schema = BuildSchema::build($esdl);
        $type = $schema->getType($name);
        $filterType = $schema->getType("{$name}Filter");

        $directory = self::resolveNamespacePath($package);
        echo " - Escribiendo en {$directory}\n";

        require_once __DIR__. '/use/entity_builder.php';
        generateEntityFromType($type, $package, "{$directory}/{$type->name}.php");
        generateEntityFromType($filterType, "{$package}.Query", "{$directory}/Query/{$type->name}Filter.php");
        require_once __DIR__. '/use/repository_builder.php';
        generateEntityRepositoryFromType($type, $namespace, "{$package}.{$type->name}", "{$directory}/Gateway/{$type->name}Gateway.php");
        require_once __DIR__. '/use/view_builder.php';
        generateEntityViewFromType($type, $namespace, "{$package}.{$type->name}", "{$directory}/View/{$type->name}ViewMetadata.php");

        // echo $txt;
        // Aqu√≠ colocar√≠as tu l√≥gica para leer DSL, generar archivos, etc.
        // Por ejemplo:
        // DslParser::parse("dsl/$name.dsl");
        // EntityGenerator::generate($definition);
        // FilterGenerator::generate($definition);
        // RepositoryGenerator::generate($definition);

        echo "‚úÖ Entidad '$name' generada correctamente.\n";
    }

    private static function write($name) 
    {

    }

    private static function resolveNamespacePath(string $package): ?string
    {
        $namespace = str_replace('.', '\\', $package);
        $psr4 = require __DIR__ . '/../vendor/composer/autoload_psr4.php';

        foreach ($psr4 as $prefix => $paths) {
            if (str_starts_with($namespace, $prefix)) {
                $relative = str_replace('\\', '/', substr($namespace, strlen($prefix)));
                return rtrim($paths[0], '/') . '/' . $relative;
            }
        }
        fwrite(STDERR, "‚ùå Error: No se encuentra el paquete $namespace.\n");
        exit(1);
    }


}